{"version":3,"sources":["../index.js"],"names":[],"mappings":";;AAAA;;AACA;;;;AACA;;;;;;AAEA;;;;;AAKA,IAAM,UAAU;AACd;AACA,QAAM,WAFQ;AAGd,QAAM,IAHQ;;AAKd;;AAEA;AACA;AACA;AACA;;AAEA;AACA,oBAAkB,EAbJ;;AAed;AACA,WAAS,KAhBK;AAiBd,iBAAe,aAjBD;AAkBd,oBAAkB,KAlBJ;;AAoBd;AACA;;AAEA;AACA;;AAEA,OAAK,mFA1BS;AA2Bd,YAAU,iHA3BI;AA4Bd,uBAAqB,CAAC;AACpB,cAAU,iFADU;AAEpB,wBAAoB,CAAC,OAAD;AAFA,GAAD;AA5BP,CAAhB;;AAkCA,SAAS,IAAT,CAAe,MAAf,EAAuB;AAAA,MACb,OADa,GACe,MADf,CACb,OADa;AAAA,MACJ,IADI,GACe,MADf,CACJ,IADI;AAAA,MACE,GADF,GACe,MADf,CACE,GADF;AAAA,MACO,GADP,GACe,MADf,CACO,GADP;;AAGrB;;;;;;;AAMA,MAAM,eAAe,eAAK,IAAL,CAAU,IAAV,EAAgB,MAAhB,EAAwB,OAAxB,CAArB;AACA,OAAK,cAAL,CAAoB,YAApB;;AAEA;;;AAGA,OAAK,MAAL;AACA,MAAI,MAAJ;AACA,MAAI,MAAJ;;AAEA,SAAO,IAAP,CAAY,OAAZ,EAAqB,YAAM;AAAA,QACjB,GADiB,GACT,OADS,CACjB,GADiB;;;AAGzB,SAAK,QAAL,CAAc,EAAE,QAAF,EAAd;AACD,GAJD;AAKD;;AAED,qCAAO,OAAP;AACE;AACA;AAFF,CAGG,IAHH,CAGQ,IAHR,EAIG,KAJH,CAIS,UAAC,GAAD,EAAS;AACd,UAAQ,KAAR,CAAc,2BAAd,EAA2C,GAA3C;AACA,YAAK,KAAL,GAFc,CAEC;AAChB,CAPH","file":"index.js","sourcesContent":["import 'babel-polyfill';\nimport Chrome from 'chrome-remote-interface';\nimport main from './src/main';\n\n/**\n * Driver wrapper for Chrome Remote Debugging Protocol.\n * Expects an inspectable instance of Chrome running (use `npm run chrome`).\n */\n\nconst OPTIONS = {\n  // Chrome instance to attach to\n  host: 'localhost',\n  port: 9222,\n\n  // chooseTab: determines which tab this client should attach to. The behavior changes according to the type:\n\n  // a function that takes the array returned by the List method and returns the numeric index of a tab;\n  // a tab object like those returned by the New and List methods;\n  // a string representing the raw WebSocket URL, in this case host and port are not used to fetch the tab list.\n  // Defaults to a function which returns the currently active tab (function (tabs) { return 0; });\n\n  // How many CSS selectors to allow (used to filter out resets, etc.)\n  maxRuleSelectors: 50,\n\n  // Output and logging options\n  verbose: false,\n  screenshotDir: 'screenshots',\n  writeScreenshots: false,\n\n  // url: 'http://jsbin.com/lutuqe',\n  // selector: '.test-element',\n\n  // url: 'http://tumblr.com',\n  // selector: '.login-section',\n\n  url: 'file:///Users/sarah/git/chrome-pdiff/examples/TooltipStylesInspiration/index.html',\n  selector: 'body > div > div.content > div > p:nth-child(1) > span.tooltip.tooltip-effect-1 > span.tooltip-content.clearfix',\n  pseudoStatesToForce: [{\n    selector: 'body > div > div.content > div > p:nth-child(1) > span.tooltip.tooltip-effect-1',\n    forcePseudoClasses: ['hover'],\n  }],\n};\n\nfunction init (chrome) {\n  const { Network, Page, DOM, CSS } = chrome;\n\n  /**\n   * Call main function on page load. Syntax is short for:\n   * chrome.on('Page.loadEventFired', (params) => {\n   *   main(chrome, OPTIONS);\n   * });\n   */\n  const mainFunction = main.bind(null, chrome, OPTIONS);\n  Page.loadEventFired(mainFunction);\n\n  /**\n   * Enable domain agents for the protocol instance\n   */\n  Page.enable();\n  DOM.enable();\n  CSS.enable();\n\n  chrome.once('ready', () => {\n    const { url } = OPTIONS;\n\n    Page.navigate({ url });\n  });\n}\n\nChrome(OPTIONS)\n  // After defining a new tab, need to initialize a connection\n  // .then((chrome) => Chrome(OPTIONS))\n  .then(init)\n  .catch((err) => {\n    console.error('Cannot connect to Chrome:', err);\n    this.close();  // TODO: No idea if this works.\n  });\n"]}