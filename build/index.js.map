{"version":3,"sources":["../index.js"],"names":[],"mappings":";;AACA;;AACA;;;;AACA;;AACA;;;;;;AAEA;AACA,IAAM,OAAiB,cAAM,CAAN,CAAvB;AACA,IAAM,cAAsB,OAAO,MAAP,CAAc,EAAd,qBAA6B,IAA7B,CAA5B;;AAEA;;;;;AAKA,SAAS,IAAT,CAAe,MAAf,EAAuB,OAAvB,EAAgC;AAAA,MACtB,IADsB,GACH,MADG,CACtB,IADsB;AAAA,MAChB,GADgB,GACH,MADG,CAChB,GADgB;AAAA,MACX,GADW,GACH,MADG,CACX,GADW;;;AAG9B,MAAM,eAAe,eAAK,IAAL,CAAU,IAAV,EAAgB,MAAhB,EAAwB,OAAxB,CAArB;AACA,OAAK,cAAL,CAAoB,YAApB;;AAEA,OAAK,MAAL;AACA,MAAI,MAAJ;AACA,MAAI,MAAJ;;AAEA,SAAO,IAAP,CAAY,OAAZ,EAAqB;AAAA,WAAM,KAAK,QAAL,CAAc,EAAE,KAAK,QAAQ,GAAf,EAAd,CAAN;AAAA,GAArB;AACD;;AAED;AACE;AADF,CAEG,IAFH,CAEQ;AAAA,SAAY,KAAK,QAAL,EAAe,WAAf,CAAZ;AAAA,CAFR,EAGG,KAHH,CAGS,YAAM;AACX;AACA,UAAQ,GAAR,CAAY,oBAAZ;;AAEA,kCAAO,GAAP;AACE;AADF,GAEG,IAFH,CAEQ;AAAA,WAAY,KAAK,QAAL,EAAe,WAAf,CAAZ;AAAA,GAFR,EAGG,KAHH,CAGS;AAAA,WAAO,QAAQ,KAAR,CAAc,2BAAd,EAA2C,GAA3C,CAAP;AAAA,GAHT;;AAKA;AACA,kCAAO,IAAP,oBAAuB,UAAC,GAAD,EAAM,IAAN,EAAe;AACpC,QAAI,GAAJ,EAAS;AACP,cAAQ,KAAR,CAAc,sBAAd,EAAsC,GAAtC;AACD;;AAED,QAAI,KAAK,MAAL,GAAc,CAAlB,EAAqB;AACnB,cAAQ,GAAR,CAAY,iBAAZ;;AAEA,cAAQ,GAAR,CAAY,KAAK,KAAL,CAAW,CAAX,EAAc,GAAd,CAAkB,UAAC,GAAD,EAAS;AAAA,YAC7B,EAD6B,GACtB,GADsB,CAC7B,EAD6B;;AAErC,eAAO,gCAAO,KAAP,CAAa,OAAO,MAAP,CAAc,EAAd,qBAA6B,EAAE,MAAF,EAA7B,CAAb,CAAP;AACD,OAHW,CAAZ;;AAKA;AACD;AACF,GAfD;AAgBD,CA7BH","file":"index.js","sourcesContent":["// @flow\nimport 'babel-polyfill';\nimport Chrome from 'chrome-remote-interface';\nimport { cdpConfig, sites } from './config';\nimport main from './src/main';\n\n// TODO: This is temporary\nconst site: TestSite = sites[0];\nconst fullOptions: Object = Object.assign({}, cdpConfig, site);\n\n/**\n * Driver wrapper for Chrome Remote Debugging Protocol.\n * Expects an inspectable instance of Chrome running (use `npm run chrome`).\n */\n\nfunction init (chrome, options) {\n  const { Page, DOM, CSS } = chrome;\n\n  const mainFunction = main.bind(null, chrome, options);\n  Page.loadEventFired(mainFunction);\n\n  Page.enable();\n  DOM.enable();\n  CSS.enable();\n\n  chrome.once('ready', () => Page.navigate({ url: options.url }));\n}\n\nChrome(cdpConfig)\n  // .then(() => Chrome(cdpConfig))\n  .then(instance => init(instance, fullOptions))\n  .catch(() => {\n    // Try to open a new tab\n    console.log('Opening new tab...');\n\n    Chrome.New(cdpConfig)\n      // .then(() => Chrome(cdpConfig))\n      .then(instance => init(instance, fullOptions))\n      .catch(err => console.error('Cannot connect to Chrome:', err));\n\n    // Close tabs if > 4 are open\n    Chrome.List(cdpConfig, (err, tabs) => {\n      if (err) {\n        console.error('Error fetching tabs:', err);\n      }\n\n      if (tabs.length > 4) {\n        console.log('Closing tabs...');\n\n        Promise.all(tabs.slice(1).map((tab) => {\n          const { id } = tab;\n          return Chrome.Close(Object.assign({}, cdpConfig, { id }));\n        }));\n\n        // console.log(JSON.stringify(tabs, null, 2));\n      }\n    })\n  });\n"]}