{"version":3,"sources":["../../../src/chrome/disableProperty.js"],"names":["instance","cssStyle","propName","CSS","styleSheetId","styleText","cssText","styleRange","range","styleProperties","cssProperties","prop","find","p","name","propText","text","styleTextDisabled","replace","setStyleTexts","edits","response","modifiedStyles","styles","modifiedStyle","modifiedStyleRange","reenabler","disableProperty"],"mappings":";;;;;;;;;;AAEA;;;;;;;;uDAOe,iBACbA,QADa,EACKC,QADL,EACyBC,QADzB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAGLC,eAHK,GAGoBH,QAHpB,CAGLG,GAHK;;AAKb;;AAEEC,wBAPW,GAUTH,QAVS,CAOXG,YAPW,EAQFC,SARE,GAUTJ,QAVS,CAQXK,OARW,EASJC,UATI,GAUTN,QAVS,CASXO,KATW;;AAYb;;AACMC,2BAbO,GAa0BR,SAASS,aAbnC;AAcPC,gBAdO,GAcaF,gBAAgBG,IAAhB,CAAqB,UAACC,CAAD;AAAA,qBAAoBA,EAAEC,IAAF,KAAWZ,QAA/B;AAAA,aAArB,CAdb;AAePa,oBAfO,GAeYJ,KAAKK,IAfjB;;AAiBb;;AACMC,6BAlBO,GAkBqBZ,UAAUa,OAAV,CAAkBH,QAAlB,UAAkCA,QAAlC,SAlBrB;;AAoBb;;AApBa;AAAA,mBAqBkBZ,IAAIgB,aAAJ,CAAkB;AAC/CC,qBAAO,CAAC;AACNhB,0CADM;AAENI,uBAAOD,UAFD;AAGNS,sBAAMC;AAHA,eAAD;AADwC,aAAlB,CArBlB;;AAAA;AAqBPI,oBArBO;;;AA6Bb;AAEgBC,0BA/BH,GA+B8CD,QA/B9C,CA+BLE,MA/BK;AAAA,6CAgCuBD,cAhCvB,MAgCLE,aAhCK;;AAkCb;;AACMC,8BAnCO,GAmC2BD,cAAchB,KAnCzC;;AAqCb;;AACMkB,qBAtCO,GAsC8B,SAArCA,SAAqC;AAAA,qBAAMvB,IAAIgB,aAAJ,CAAkB;AACjEC,uBAAO,CAAC;AACNhB,4CADM;AAENI,yBAAOiB,kBAFD;AAGNT,wBAAMX;AAHA,iBAAD;AAD0D,eAAlB,CAAN;AAAA,aAtC9B;;AAAA,6CA8CNqB,SA9CM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;WAAeC,e;;;;SAAAA,e","file":"disableProperty.js","sourcesContent":["// @flow\n\n/**\n * Disables the given property within a CSSStyle object.\n *\n * Returns a Promise which resolves to a \"re-enabler\" function. When invoked, this\n * function re-enables the original property, returning a Promise that resolves to\n * the restored CSSStyle object.\n */\nexport default async function disableProperty (\n  instance: Object, cssStyle: CSSStyle, propName: string\n): Promise<() => Promise<CSSStyle>> {\n  const { CSS }: { CSS: Object } = instance;\n\n  // Get styleSheetId, cssText and style range\n  const {\n    styleSheetId,\n    cssText: styleText,\n    range: styleRange,\n  } = cssStyle;\n\n  // Get the range and text of the property to be disabled\n  const styleProperties: CSSProperty[] = cssStyle.cssProperties;\n  const prop: CSSProperty = styleProperties.find((p: CSSProperty) => p.name === propName);\n  const propText: string = prop.text;\n\n  // Construct the replacement text\n  const styleTextDisabled: string = styleText.replace(propText, `/* ${propText} */`);\n\n  // Disable the style, await the response\n  const response: Object = await CSS.setStyleTexts({\n    edits: [{\n      styleSheetId,\n      range: styleRange,\n      text: styleTextDisabled,\n    }],\n  });\n\n  // Since the protocol returns a response object, need to destructure\n  // twice to get the modified CSSStyle object\n  const { styles: modifiedStyles }: { styles: CSSStyle[] } = response;\n  const [ modifiedStyle ]: CSSStyle = modifiedStyles;\n\n  // Get the modified range from the modified CSSStyle object\n  const modifiedStyleRange: SourceRange = modifiedStyle.range;\n\n  // Construct a re-enabler function, restoring the original styleText\n  const reenabler: () => Promise<CSSStyle> = () => CSS.setStyleTexts({\n    edits: [{\n      styleSheetId,\n      range: modifiedStyleRange,\n      text: styleText,\n    }],\n  });\n\n  return reenabler;\n}\n"]}