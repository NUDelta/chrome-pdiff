{"version":3,"sources":["../../src/disableProperty.js"],"names":["disableProperty","instance","cssStyle","propName","CSS","styleSheetId","styleText","cssText","styleRange","range","styleProperties","cssProperties","prop","find","p","name","propText","text","styleTextDisabled","replace","setStyleTexts","edits","response","modifiedStyles","styles","modifiedStyle","modifiedStyleRange","reenabler"],"mappings":";;;;;;;;kBAUwBA,e;;AATxB;;;;;;AAEA;;;;;;;AAOe,SAASA,eAAT,CACbC,QADa,EACKC,QADL,EACyBC,QADzB,EAEqB;AAClC,SAAO,0CAAG;AAAA;;AAAA;AAAA;AAAA;AAAA;AACAC,eADA,GACyBH,QADzB,CACAG,GADA;;AAGR;;AAEEC,wBALM,GAQJH,QARI,CAKNG,YALM,EAMGC,SANH,GAQJJ,QARI,CAMNK,OANM,EAOCC,UAPD,GAQJN,QARI,CAONO,KAPM;;AAUR;;AACMC,2BAXE,GAW+BR,SAASS,aAXxC;AAYFC,gBAZE,GAYkBF,gBAAgBG,IAAhB,CAAqB,UAACC,CAAD;AAAA,qBAAoBA,EAAEC,IAAF,KAAWZ,QAA/B;AAAA,aAArB,CAZlB;AAaFa,oBAbE,GAaiBJ,KAAKK,IAbtB;;AAeR;;AACMC,6BAhBE,GAgB0BZ,UAAUa,OAAV,CAAkBH,QAAlB,UAAkCA,QAAlC,SAhB1B;;AAkBR;;AAlBQ;AAAA,mBAmBuBZ,IAAIgB,aAAJ,CAAkB;AAC/CC,qBAAO,CAAC;AACNhB,0CADM;AAENI,uBAAOD,UAFD;AAGNS,sBAAMC;AAHA,eAAD;AADwC,aAAlB,CAnBvB;;AAAA;AAmBFI,oBAnBE;;;AA2BR;AAEgBC,0BA7BR,GA6BmDD,QA7BnD,CA6BAE,MA7BA;AAAA,6CA8B4BD,cA9B5B,MA8BAE,aA9BA;;AAgCR;;AACMC,8BAjCE,GAiCgCD,cAAchB,KAjC9C;;AAmCR;;AACMkB,qBApCE,GAoCmC,SAArCA,SAAqC;AAAA,qBAAMvB,IAAIgB,aAAJ,CAAkB;AACjEC,uBAAO,CAAC;AACNhB,4CADM;AAENI,yBAAOiB,kBAFD;AAGNT,wBAAMX;AAHA,iBAAD;AAD0D,eAAlB,CAAN;AAAA,aApCnC;;AAAA,6CA4CDqB,SA5CC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH,EAAP;AA8CD","file":"disableProperty.js","sourcesContent":["// @flow\nimport co from 'co';\n\n/**\n * Disables the given property within a CSSStyle object.\n *\n * Returns a Promise which resolves to a \"re-enabler\" function. When invoked, this\n * function re-enables the original property, returning a Promise that resolves to\n * the restored CSSStyle object.\n */\nexport default function disableProperty (\n  instance: Object, cssStyle: CSSStyle, propName: string\n): Promise<() => Promise<CSSStyle>> {\n  return co(function* () {\n    const { CSS }: { CSS: Object } = instance;\n\n    // Get styleSheetId, cssText and style range\n    const {\n      styleSheetId,\n      cssText: styleText,\n      range: styleRange,\n    } = cssStyle;\n\n    // Get the range and text of the property to be disabled\n    const styleProperties: CSSProperty[] = cssStyle.cssProperties;\n    const prop: CSSProperty = styleProperties.find((p: CSSProperty) => p.name === propName);\n    const propText: string = prop.text;\n\n    // Construct the replacement text\n    const styleTextDisabled: string = styleText.replace(propText, `/* ${propText} */`);\n\n    // Disable the style, await the response\n    const response: Object = yield CSS.setStyleTexts({\n      edits: [{\n        styleSheetId,\n        range: styleRange,\n        text: styleTextDisabled,\n      }],\n    });\n\n    // Since the protocol returns a response object, need to destructure\n    // twice to get the modified CSSStyle object\n    const { styles: modifiedStyles }: { styles: CSSStyle[] } = response;\n    const [ modifiedStyle ]: CSSStyle = modifiedStyles;\n\n    // Get the modified range from the modified CSSStyle object\n    const modifiedStyleRange: SourceRange = modifiedStyle.range;\n\n    // Construct a re-enabler function, restoring the original styleText\n    const reenabler: () => Promise<CSSStyle> = () => CSS.setStyleTexts({\n      edits: [{\n        styleSheetId,\n        range: modifiedStyleRange,\n        text: styleText,\n      }],\n    });\n\n    return reenabler;\n  });\n}\n"]}