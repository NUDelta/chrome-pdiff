{"version":3,"sources":["../../src/preparePage.js"],"names":["instance","rootId","selector","pseudoStatesToForce","CSS","nodeId","forcePseudoState","forcedPseudoClasses","options","length","promisify","bind","Promise","all","map","ps","forcePseudoClasses","promises","applyPseudoStates"],"mappings":";;;;;;;AAGA;;;;;;;;;uDAQA,iBAAiCA,QAAjC,EAAmDC,MAAnD,EAAmEC,QAAnE,EAAqFC,mBAArF;AAAA;AAAA;AAAA;AAAA;AAAA;AACUC,eADV,GACkBJ,QADlB,CACUI,GADV;AAAA;AAAA,mBAG+B,yBAAUJ,QAAV,EAAoBC,MAApB,EAA4BC,QAA5B,CAH/B;;AAAA;AAGQG,kBAHR;AAAA,6CAKSD,IAAIE,gBAAJ,CAAqB;AAC1BD,4BAD0B;AAE1BE,mCAAqBJ;AAFK,aAArB,CALT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeG,gB;;;;;AAWf;;;;;;wDAGO,kBAAkCN,QAAlC,EAAoDC,MAApD,EAAoEO,OAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AACGJ,eADH,GACWJ,QADX,CACGI,GADH;AAEGD,+BAFH,GAE2BK,OAF3B,CAEGL,mBAFH;;AAIL;;AAJK,kBAKD,CAACA,mBAAD,IAAwB,CAACA,oBAAoBM,MAL5C;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AASL;;;;;;;AAOA;AACMC,qBAjBD,GAiBaJ,iBAAiBK,IAAjB,CAAsB,IAAtB,EAA4BX,QAA5B,EAAsCC,MAAtC,CAjBb;AAAA;AAAA,mBAkBkBW,QAAQC,GAAR,CAAYV,oBAAoBW,GAApB,CAAwB;AAAA,qBAAMJ,UAAUK,GAAGb,QAAb,EAAuBa,GAAGC,kBAA1B,CAAN;AAAA,aAAxB,CAAZ,CAlBlB;;AAAA;AAkBCC,oBAlBD;AAAA,8CAoBEjB,QApBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAekB,iB;;;;;AAxBtB","file":"preparePage.js","sourcesContent":["// @flow\nimport { getNodeId } from './elements';\n\n/**\n * Force a pseudo state on a particular element.\n * @param {Object} instance    a Chrome Remote Viewer instance\n * @param {number} rootId      nodeId of document root node\n * @param {String} selector    selector for the element to force\n * @param {PseudoClass[]} forcePseudoStates   array of pseudoclasses to force\n * @return {Promise<void>}\n */\nasync function forcePseudoState (instance: Object, rootId: number, selector: string, pseudoStatesToForce: PseudoClass[]): Promise<> {\n  const { CSS } = instance;\n\n  const nodeId: number = await getNodeId(instance, rootId, selector);\n\n  return CSS.forcePseudoState({\n    nodeId,\n    forcedPseudoClasses: pseudoStatesToForce,\n  });\n}\n\n/**\n * Add pseudoclasses to elements on the page before screenshotting.\n */\nexport async function applyPseudoStates (instance: Object, rootId: number, options: Object): Promise<Object> {\n  const { CSS } = instance;\n  const { pseudoStatesToForce } = options;\n\n  // If `options.pseudoStatesToForce` was undefined or an empty array, ignore\n  if (!pseudoStatesToForce || !pseudoStatesToForce.length) {\n    return;\n  }\n\n  /**\n   * pseudoStates: [{\n   *   selector: 'body > div > div.content > div > p:nth-child(1) > span.tooltip.tooltip-effect-1',\n   *   forcePseudoClasses: ['hover'],\n   * }],\n   */\n\n  // Bind the helper promisifier to the current instance.\n  const promisify = forcePseudoState.bind(null, instance, rootId);\n  const promises = await Promise.all(pseudoStatesToForce.map(ps => promisify(ps.selector, ps.forcePseudoClasses)));\n\n  return instance;\n}\n"]}