{"version":3,"sources":["../../src/main.js"],"names":["main","diffRuleMatches","instance","options","ruleMatches","screenshotDirPath","resolve","__dirname","screenshotDir","writeScreenshots","basePNG","differ","diffScores","cssRules","rm","rmRuleStyle","rule","style","selectorString","selectorList","text","console","log","JSON","stringify","rmDiff","props","cssProperties","prop","propName","name","reenabler","comparisonPNG","Promise","all","diff","normalizeScores","propDiffs","Object","keys","allScores","map","k","maxScore","Math","max","apply","minScore","min","range","normalized","entries","score","normalizedScore","require","filename","module","process","cwd","rootId","pseudoStates","selector","dr","close"],"mappings":";;;;;;;;kBAsHwBA,I;;AArHxB;;;;AACA;;;;AACA;;AACA;;AACA;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,SAASC,eAAT,CAA0BC,QAA1B,EAA4CC,OAA5C,EAA6DC,WAA7D,EAA6G;AAC3G,SAAO,0CAAG;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAER;AACMC,6BAHE,GAG0B,eAAKC,OAAL,CAAaC,SAAb,EAAwB,KAAxB,EAA+BJ,QAAQK,aAAvC,CAH1B;;AAKR;;;;AALQ;AAAA,mBAQmB,0BAAeN,QAAf,EAAyBC,QAAQM,gBAAjC,EAAmD,eAAKH,OAAL,CAAaD,iBAAb,EAAgC,UAAhC,CAAnD,CARnB;;AAAA;AAQFK,mBARE;AAAA;AAAA,mBAUa,qBAAaA,OAAb,CAVb;;AAAA;AAUFC,kBAVE;;;AAYR;AAEMC,sBAdE,GAcwB,EAdxB;;AAgBR;;AACMC,oBAjBE,GAiBS,EAjBT;;AAmBR;;;;AAnBQ;AAAA;AAAA;AAAA;AAAA,wBAsBoBT,WAtBpB;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAsBGU,cAtBH;AAuBAC,uBAvBA,GAuBwBD,GAAGE,IAAH,CAAQC,KAvBhC;AAwBAC,0BAxBA,GAwByBJ,GAAGE,IAAH,CAAQG,YAAR,CAAqBC,IAxB9C;;;AA0BNC,oBAAQC,GAAR,CAAYC,KAAKC,SAAL,CAAeN,cAAf,EAA+B,IAA/B,EAAqC,CAArC,CAAZ;;AAEA;AACMO,kBA7BA,GA6BsB,EA7BtB;;AA+BN;;;;AAGMC,iBAlCA,GAkCuBX,YAAYY,aAlCnC;AAAA;AAAA;AAAA;AAAA;AAAA,yBAoCWD,KApCX;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAoCGE,gBApCH;AAqCEC,oBArCF,GAqCaD,KAAKE,IArClB;;AAuCJ;;AAvCI;AAAA,mBAwC6C,+BAAgB5B,QAAhB,EAA0Ba,WAA1B,EAAuCc,QAAvC,CAxC7C;;AAAA;AAwCEE,qBAxCF;AAAA;AAAA,mBA2C6B,0BAC/B7B,QAD+B,EAE/BC,QAAQM,gBAFuB,EAG/B,eAAKH,OAAL,CAAaD,iBAAb,EAAmCuB,KAAKE,IAAxC,UAH+B,CA3C7B;;AAAA;AA2CEE,yBA3CF;AAAA;AAAA,mBAkDmBC,QAAQC,GAAR,CAAY,CACjCvB,OACEqB,aADF,EAEE7B,QAAQM,gBAAR,IAA4BmB,KAAKE,IAAL,KAAc,qBAA1C,IAAmEF,KAAKE,IAAL,KAAc,qBAFnF,EAGE,eAAKxB,OAAL,CAAaD,iBAAb,EAAmCuB,KAAKE,IAAxC,eAHF,CADiC,EAMjCC,WANiC,CAAZ,CAlDnB;;AAAA;AAAA;AAAA;AAkDII,gBAlDJ;;;AA2DJd,oBAAQC,GAAR,CAAYM,KAAKE,IAAjB,EAAuBK,IAAvB;;AAEA;AACAV,mBAAOG,KAAKE,IAAZ,IAAoBK,IAApB;;AA9DI;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAiEN;AACAtB,qBAASK,cAAT,IAA2BO,MAA3B;;AAlEM;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,6CAqEDZ,QArEC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH,EAAP;AAuED;;AAED;;;;;AAKA,SAASuB,eAAT,CAA0BC,SAA1B,EAA+D;AAC7D,MAAMX,QAAkBY,OAAOC,IAAP,CAAYF,SAAZ,CAAxB;;AAEA;AACA,MAAMG,YAAsBd,MAAMe,GAAN,CAAU;AAAA,WAAKJ,UAAUK,CAAV,CAAL;AAAA,GAAV,CAA5B;AACA,MAAMC,WAAmBC,KAAKC,GAAL,CAASC,KAAT,CAAe,IAAf,EAAqBN,SAArB,CAAzB;AACA,MAAMO,WAAmBH,KAAKI,GAAL,CAASF,KAAT,CAAe,IAAf,EAAqBN,SAArB,CAAzB;AACA,MAAMS,QAAgBN,WAAWI,QAAjC;;AAEA;AACA;;AAEA;AACA,MAAMG,aAA0B,EAAhC;;AAb6D;AAAA;AAAA;;AAAA;AAe7D,0BAA8CZ,OAAOa,OAAP,CAAed,SAAf,CAA9C,mIAAyE;AAAA;AAAA,UAA5DT,IAA4D;AAAA,UAA9CwB,KAA8C;;AACvE,UAAMC,kBAA0BJ,QAAQ,CAAR,GAC5B,CAACG,QAAQL,QAAT,IAAqBE,KADO,GAE5B,CAFJ;;AAIAC,iBAAWtB,IAAX,IAAmByB,eAAnB;AACD;AArB4D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAuB7D,SAAOH,UAAP;AACD;;AAED;;;AAGe,SAASlD,IAAT,CAAeE,QAAf,EAAyBC,OAAzB,EAAkC;AAC/C,SAAO,0CAAG;AAAA;;AAAA;AAAA;AAAA;AAAA;AACR;AACAkB,oBAAQC,GAAR,CAAYgC,QAAQtD,IAAR,CAAauD,QAAzB;AACAlC,oBAAQC,GAAR,CAAYkC,MAAZ;AACAnC,oBAAQC,GAAR,CAAYmC,QAAQC,GAAR,EAAZ;;AAEA;AANQ;AAAA,mBAOqB,iCAAkBxD,QAAlB,CAPrB;;AAAA;AAOFyD,kBAPE;AAAA;AAAA,mBAUmB,oCAAkBzD,QAAlB,EAA4ByD,MAA5B,EAAoCxD,OAApC,CAVnB;;AAAA;AAUFyD,wBAVE;AAAA;AAAA,mBAa+B,gCAAiB1D,QAAjB,EAA2ByD,MAA3B,EAAmCxD,OAAnC,CAb/B;;AAAA;AAaFC,uBAbE;AAAA;AAAA,mBAgB4BH,gBAAgBC,QAAhB,EAA0BC,OAA1B,EAAmCC,WAAnC,CAhB5B;;AAAA;AAgBFS,oBAhBE;;AAiBRQ,oBAAQC,GAAR,CAAYC,KAAKC,SAAL,CAAeX,QAAf,EAAyB,IAAzB,EAA+B,CAA/B,CAAZ;;AAEMqC,sBAnBE,GAmBwB,EAnBxB;AAAA;AAAA;AAAA;AAAA;;;AAqBR,8BAA+BZ,OAAOa,OAAP,CAAetC,QAAf,CAA/B,2HAAyD;AAAA,8DAA5CgD,QAA4C,oBAAlCC,EAAkC;;AACvDZ,yBAAWW,QAAX,IAAuBzB,gBAAgB0B,EAAhB,CAAvB;AACD;;AAvBO;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAyBRzC,oBAAQC,GAAR,CAAYC,KAAKC,SAAL,CAAe0B,UAAf,EAA2B,IAA3B,EAAiC,CAAjC,CAAZ;;AAEAhD,qBAAS6D,KAAT;;AA3BQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH,EAAP;AA6BD","file":"main.js","sourcesContent":["// @flow\nimport path from 'path';\nimport co from 'co';\nimport { PNG } from 'pngjs';\nimport { applyPseudoStates } from './preparePage';\nimport { getElementStyles, getDocumentRootId } from './elements';\nimport disableProperty from './disableProperty';\nimport screenshotPage from './screenshot';\nimport createDiffer from './pdiff';\n\nfunction diffRuleMatches (instance: Object, options: Object, ruleMatches: RuleMatch[]): Promise<DiffResults> {\n  return co(function* () {\n\n    // Base path for all screenshots\n    const screenshotDirPath: string = path.resolve(__dirname, '../', options.screenshotDir);\n\n    /**\n     * Capture and write the base screenshot for comparison.\n     */\n    const basePNG: PNG = yield screenshotPage(instance, options.writeScreenshots, path.resolve(screenshotDirPath, 'base.png'));\n\n    const differ = yield createDiffer(basePNG);\n\n    // Collect diff scores\n    // TODO: replace with a heap (or some other way to keep track of the sorting)\n    const diffScores: DiffResults = {};\n\n    // Also collect the rule structure\n    const cssRules = {};\n\n    /**\n     * Iterate over each RuleMatch and toggle its styles\n     */\n    for (const rm: RuleMatch of ruleMatches) {\n      const rmRuleStyle: CSSStyle = rm.rule.style;\n      const selectorString: string = rm.rule.selectorList.text;\n\n      console.log(JSON.stringify(selectorString, null, 4));\n\n      // Collect the diff for this rule\n      const rmDiff: DiffResults = {};\n\n      /**\n       * Iterate over props and toggle/screenshot each.\n       */\n      const props: CSSProperty[] = rmRuleStyle.cssProperties;\n\n      for (let prop of props) {\n        const propName = prop.name;\n\n        // Disable the property and save the reenabler function\n        const reenabler: () => Promise<CSSStyle> = yield disableProperty(instance, rmRuleStyle, propName);\n\n        // Screenshot page\n        const comparisonPNG: PNG = yield screenshotPage(\n          instance,\n          options.writeScreenshots,\n          path.resolve(screenshotDirPath, `${prop.name}.png`),\n        );\n\n        // Re-enable and compute diff simultaneously\n        const [ diff ] = yield Promise.all([\n          differ(\n            comparisonPNG,\n            options.writeScreenshots || prop.name === 'background-repeat-x' || prop.name === 'transition-duration',\n            path.resolve(screenshotDirPath, `${prop.name}-diff.png`)\n          ),\n          reenabler(),\n        ]);\n\n        console.log(prop.name, diff);\n\n        // Add the result for this prop to the rmDiff object for this rule block\n        rmDiff[prop.name] = diff;\n      }\n\n      // Add the diff results for this rule to the structure-preserving cssRules object.\n      cssRules[selectorString] = rmDiff;\n    }\n\n    return cssRules;\n  });\n}\n\n/**\n * Iterate over the diff results and return an ordering of normalized prop-diff pairs.\n * @param  {DiffResults} propDiffs   map from properties to pdiff scores\n * @return {DiffPair[]}              pairs ordered from largest to smallest score\n */\nfunction normalizeScores (propDiffs: DiffResults): DiffResults {\n  const props: string[] = Object.keys(propDiffs);\n\n  // First compute the max pdiff value\n  const allScores: number[] = props.map(k => propDiffs[k]);\n  const maxScore: number = Math.max.apply(null, allScores);\n  const minScore: number = Math.min.apply(null, allScores);\n  const range: number = maxScore - minScore;\n\n  // console.log(Object.entries(propDiffs).find(pair => pair[1] === maxScore));\n  // console.log(Object.entries(propDiffs).find(pair => pair[1] === minScore));\n\n  // Normalize everything\n  const normalized: DiffResults = {};\n\n  for (const [ prop: string, score: number ] of Object.entries(propDiffs)) {\n    const normalizedScore: number = range > 0\n      ? (score - minScore) / range\n      : 0;\n\n    normalized[prop] = normalizedScore;\n  }\n\n  return normalized;\n}\n\n/**\n * Function to execute once the page loads in Canary.\n */\nexport default function main (instance, options) {\n  return co(function* () {\n    debugger;\n    console.log(require.main.filename);\n    console.log(module);\n    console.log(process.cwd());\n\n    // Get root node\n    const rootId: number = yield getDocumentRootId(instance);\n\n    // Apply pseudo-states\n    const pseudoStates = yield applyPseudoStates(instance, rootId, options);\n\n    // Get element styles\n    const ruleMatches: RuleMatch[] = yield getElementStyles(instance, rootId, options);\n\n    // Diff everything\n    const cssRules: DiffResults = yield diffRuleMatches(instance, options, ruleMatches);\n    console.log(JSON.stringify(cssRules, null, 2));\n\n    const normalized: DiffResults = {};\n\n    for (const [ selector, dr ] of Object.entries(cssRules)) {\n      normalized[selector] = normalizeScores(dr);\n    }\n\n    console.log(JSON.stringify(normalized, null, 2));\n\n    instance.close();\n  });\n}\n"]}