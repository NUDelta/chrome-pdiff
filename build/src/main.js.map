{"version":3,"sources":["../../src/main.js"],"names":["instance","options","rootId","pseudoStatesToForce","length","ruleMatches","cssRules","normalized","selector","dr","push","console","log","JSON","stringify","close","main"],"mappings":";;;;;;;;AACA;;AACA;;AACA;;;;AAEA;;;;uDAGe,iBAAqBA,QAArB,EAAuCC,OAAvC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEgB,iCAAkBD,QAAlB,CAFhB;;AAAA;AAEPE,kBAFO;;AAAA,kBAKTD,QAAQE,mBAAR,IAA+BF,QAAQE,mBAAR,CAA4BC,MALlD;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAML,oCAAkBJ,QAAlB,EAA4BE,MAA5B,EAAoCD,OAApC,CANK;;AAAA;AAAA;AAAA,mBAU0B,gCAAiBD,QAAjB,EAA2BE,MAA3B,EAAmCD,OAAnC,CAV1B;;AAAA;AAUPI,uBAVO;AAAA;AAAA,mBAaqC,kCAAgBL,QAAhB,EAA0BC,OAA1B,EAAmCI,WAAnC,CAbrC;;AAAA;AAaPC,oBAbO;;;AAeb;;;AAGMC,sBAlBO,GAkBiC,EAlBjC;AAAA;AAAA;AAAA;AAAA;;;AAoBb,6BAA+BD,QAA/B,uHAAyC;AAAA,4DAA5BE,QAA4B,mBAAlBC,EAAkB;;AACvCF,yBAAWG,IAAX,CAAgB,CAAEF,QAAF,EAAY,kCAAgBC,EAAhB,CAAZ,CAAhB;AACD;;AAtBY;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAwBbE,oBAAQC,GAAR,CAAYC,KAAKC,SAAL,CAAeP,UAAf,EAA2B,IAA3B,EAAiC,CAAjC,CAAZ;;AAEAP,qBAASe,KAAT;;AA1Ba;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;WAAeC,I;;;;SAAAA,I","file":"main.js","sourcesContent":["// @flow\nimport { applyPseudoStates } from './chrome/preparePage';\nimport { getElementStyles, getDocumentRootId } from './chrome/elements';\nimport { diffRuleMatches, normalizeScores } from './diff/processDiff';\n\n/**\n * Function to execute once the page loads in Canary.\n */\nexport default async function main (instance: Object, options: Object) {\n  // Get root node\n  const rootId: number = await getDocumentRootId(instance);\n\n  // Apply pseudo-states\n  if (options.pseudoStatesToForce && options.pseudoStatesToForce.length) {\n    await applyPseudoStates(instance, rootId, options);\n  }\n\n  // Get element styles\n  const ruleMatches: RuleMatch[] = await getElementStyles(instance, rootId, options);\n\n  // Diff everything\n  const cssRules: [ string, DiffResults ][] = await diffRuleMatches(instance, options, ruleMatches);\n\n  /**\n   * Normalize the output for each pair.\n   */\n  const normalized: [ string, DiffResults ][] = [];\n\n  for (const [ selector, dr ] of cssRules) {\n    normalized.push([ selector, normalizeScores(dr) ]);\n  }\n\n  console.log(JSON.stringify(normalized, null, 2));\n\n  instance.close();\n}\n"]}