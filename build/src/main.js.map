{"version":3,"sources":["../../src/main.js"],"names":["instance","options","ruleMatches","screenshotDirPath","resolve","__dirname","screenshotDir","writeScreenshots","basePNG","differ","diffScores","cssRules","rm","rmRuleStyle","rule","style","selectorString","selectorList","text","console","log","JSON","stringify","rmDiff","props","cssProperties","prop","propName","name","reenabler","comparisonPNG","Promise","all","diff","diffRuleMatches","normalizeScores","propDiffs","Object","keys","allScores","map","k","maxScore","Math","max","apply","minScore","min","range","normalized","entries","score","normalizedScore","rootId","pseudoStatesToForce","length","selector","dr","close","error","main"],"mappings":"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","file":"main.js","sourcesContent":["// @flow\nimport path from 'path';\nimport { PNG } from 'pngjs';\nimport { applyPseudoStates } from './preparePage';\nimport { getElementStyles, getDocumentRootId } from './elements';\nimport disableProperty from './disableProperty';\nimport screenshotPage from './screenshot';\nimport createDiffer from './pdiff';\n\nasync function diffRuleMatches (instance: Object, options: Object, ruleMatches: RuleMatch[]): Promise<DiffResults> {\n  // Base path for all screenshots\n  const screenshotDirPath: string = path.resolve(__dirname, '../', options.screenshotDir);\n\n  /**\n   * Capture and write the base screenshot for comparison.\n   */\n  const basePNG: PNG = await screenshotPage(instance, options.writeScreenshots, path.resolve(screenshotDirPath, 'base.png'));\n\n  const differ = await createDiffer(basePNG);\n\n  // Collect diff scores\n  // TODO: replace with a heap (or some other way to keep track of the sorting)\n  const diffScores: DiffResults = {};\n\n  // Also collect the rule structure\n  const cssRules = {};\n\n  /**\n   * Iterate over each RuleMatch and toggle its styles\n   */\n  for (const rm: RuleMatch of ruleMatches) {\n    const rmRuleStyle: CSSStyle = rm.rule.style;\n    const selectorString: string = rm.rule.selectorList.text;\n\n    console.log(JSON.stringify(selectorString, null, 4));\n\n    // Collect the diff for this rule\n    const rmDiff: DiffResults = {};\n\n    /**\n     * Iterate over props and toggle/screenshot each.\n     */\n    const props: CSSProperty[] = rmRuleStyle.cssProperties;\n\n    for (const prop of props) {\n      const propName = prop.name;\n\n      // Disable the property and save the reenabler function\n      const reenabler: () => Promise<CSSStyle> = await disableProperty(instance, rmRuleStyle, propName);\n\n      // Screenshot page\n      const comparisonPNG: PNG = await screenshotPage(\n        instance,\n        options.writeScreenshots,\n        path.resolve(screenshotDirPath, `${prop.name}.png`),\n      );\n\n      // Re-enable and compute diff simultaneously\n      const [ diff ] = await Promise.all([\n        differ(\n          comparisonPNG,\n          options.writeScreenshots || prop.name === 'background-repeat-x' || prop.name === 'transition-duration',\n          path.resolve(screenshotDirPath, `${prop.name}-diff.png`)\n        ),\n        reenabler(),\n      ]);\n\n      console.log(prop.name, diff);\n\n      // Add the result for this prop to the rmDiff object for this rule block\n      rmDiff[prop.name] = diff;\n    }\n\n    // Add the diff results for this rule to the structure-preserving cssRules object.\n    cssRules[selectorString] = rmDiff;\n  }\n\n  return cssRules;\n}\n\n/**\n * Iterate over the diff results and return an ordering of normalized prop-diff pairs.\n * @param  {DiffResults} propDiffs   map from properties to pdiff scores\n * @return {DiffPair[]}              pairs ordered from largest to smallest score\n */\nfunction normalizeScores (propDiffs: DiffResults): DiffResults {\n  const props: string[] = Object.keys(propDiffs);\n\n  // First compute the max pdiff value\n  const allScores: number[] = props.map(k => propDiffs[k]);\n  const maxScore: number = Math.max.apply(null, allScores);\n  const minScore: number = Math.min.apply(null, allScores);\n  const range: number = maxScore - minScore;\n\n  // console.log(Object.entries(propDiffs).find(pair => pair[1] === maxScore));\n  // console.log(Object.entries(propDiffs).find(pair => pair[1] === minScore));\n\n  // Normalize everything\n  const normalized: DiffResults = {};\n\n  for (const [ prop: string, score: number ] of Object.entries(propDiffs)) {\n    const normalizedScore: number = range > 0\n      ? (score - minScore) / range\n      : 0;\n\n    normalized[prop] = normalizedScore;\n  }\n\n  return normalized;\n}\n\n/**\n * Function to execute once the page loads in Canary.\n */\nexport default async function main (instance, options) {\n  debugger;\n\n  try {\n    // Get root node\n    const rootId: number = await getDocumentRootId(instance);\n\n    // Apply pseudo-states\n    if (options.pseudoStatesToForce.length) {\n      await applyPseudoStates(instance, rootId, options);\n    }\n\n    // Get element styles\n    const ruleMatches: RuleMatch[] = await getElementStyles(instance, rootId, options);\n\n    // Diff everything\n    const cssRules: DiffResults = await diffRuleMatches(instance, options, ruleMatches);\n    console.log(JSON.stringify(cssRules, null, 2));\n\n    const normalized: DiffResults = {};\n\n    for (const [ selector, dr ] of Object.entries(cssRules)) {\n      normalized[selector] = normalizeScores(dr);\n    }\n\n    console.log(JSON.stringify(normalized, null, 2));\n\n    instance.close();\n  } catch (err) {\n    console.error(err);\n    instance.close();\n  }\n}\n"]}