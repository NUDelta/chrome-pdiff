{"version":3,"sources":["../../src/pdiff.js"],"names":["createDiffer","basePNG","width","height","differ","comparisonPNG","writeDiffFile","diffFilePath","diffPNG","diffSize","data","threshold","pack","pipe","createWriteStream","Promise","resolve"],"mappings":";;;;;kBAKwBA,Y;;AAJxB;;;;AACA;;AACA;;;;;;AAEe,SAASA,YAAT,CAAuBC,OAAvB,EAC0E;AACrF;AADqF,MAE/EC,KAF+E,GAE7DD,OAF6D,CAE/EC,KAF+E;AAAA,MAExEC,MAFwE,GAE7DF,OAF6D,CAExEE,MAFwE;;AAIvF;;;;;AAIA,MAAMC,SAAS,SAATA,MAAS,CAACC,aAAD,EAA6E;AAAA,QAAxDC,aAAwD,uEAAxC,KAAwC;AAAA,QAAjCC,YAAiC;;AAC1F,QAAMC,UAAUF,gBAAgB,eAAQ,EAAEJ,YAAF,EAASC,cAAT,EAAR,CAAhB,GAA6C,IAA7D;;AAEA,QAAMM,WAAmB,0BAAWR,QAAQS,IAAnB,EAAyBL,cAAcK,IAAvC,EAA6CF,WAAWA,QAAQE,IAAhE,EAAsER,KAAtE,EAA6EC,MAA7E,EAAqF,EAAEQ,WAAW,GAAb,EAArF,CAAzB;;AAEA;AACA,QAAIL,aAAJ,EAAmB;AACjBE,cAAQI,IAAR,GAAeC,IAAf,CAAoB,aAAGC,iBAAH,CAAqBP,YAArB,CAApB;AACD;;AAED,WAAOE,QAAP;AACD,GAXD;;AAaA,SAAOM,QAAQC,OAAR,CAAgBZ,MAAhB,CAAP;AACD","file":"pdiff.js","sourcesContent":["// @flow\nimport fs from 'fs';\nimport { PNG } from 'pngjs';\nimport pixelmatch from 'pixelmatch';\n\nexport default function createDiffer (basePNG: PNG):\n  Promise<(comparisonPNG: PNG, writeDiffFile: boolean, diffFilePath?: string) => number> {\n    // Get the width and height for the base PNG dimensions.\n  const { width, height } = basePNG;\n\n  /**\n   * Differ function. Basically a partial application of the Pixelmatch\n   * diff algorithm, with a closure around the base image.\n   */\n  const differ = (comparisonPNG: PNG, writeDiffFile = false, diffFilePath: string): number => {\n    const diffPNG = writeDiffFile ? new PNG({ width, height }) : null;\n\n    const diffSize: number = pixelmatch(basePNG.data, comparisonPNG.data, diffPNG && diffPNG.data, width, height, { threshold: 0.2 });\n\n    // Optionally write the diff image to disk.\n    if (writeDiffFile) {\n      diffPNG.pack().pipe(fs.createWriteStream(diffFilePath));\n    }\n\n    return diffSize;\n  };\n\n  return Promise.resolve(differ);\n}\n"]}