{"version":3,"sources":["../../../src/diff/processDiff.js"],"names":["instance","options","ruleMatches","screenshotDirPath","resolve","__dirname","screenshotDir","writeScreenshots","basePNG","differ","cssRules","rm","rmRuleStyle","rule","style","matchingSelectorIndices","matchingSelectors","selectors","selectorList","selectorString","map","i","text","join","console","log","JSON","stringify","rmDiff","props","cssProperties","prop","propName","name","reenabler","prefix","test","comparisonPNG","Promise","all","diff","push","diffRuleMatches","normalizeScores","propDiffs","Object","keys","allScores","k","maxScore","Math","max","apply","minScore","min","range","normalized","entries","score","normalizedScore"],"mappings":"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","file":"processDiff.js","sourcesContent":["import path from 'path';\nimport disableProperty from '../chrome/disableProperty';\nimport screenshotPage from '../chrome/screenshot';\nimport createDiffer from './pdiff';\n\n/**\n * Iterate over the diff results and return an ordering of normalized prop-diff pairs.\n * @param  {DiffResults} propDiffs   map from properties to pdiff scores\n * @return {DiffPair[]}              pairs ordered from largest to smallest score\n */\nexport function normalizeScores (propDiffs: DiffResults): DiffResults {\n  const props: string[] = Object.keys(propDiffs);\n\n  // First compute the max pdiff value\n  const allScores: number[] = props.map(k => propDiffs[k]);\n  const maxScore: number = Math.max.apply(null, allScores);\n  const minScore: number = Math.min.apply(null, allScores);\n  const range: number = maxScore - minScore;\n\n  // console.log(Object.entries(propDiffs).find(pair => pair[1] === maxScore));\n  // console.log(Object.entries(propDiffs).find(pair => pair[1] === minScore));\n\n  // Normalize everything\n  const normalized: DiffResults = {};\n\n  for (const [ prop: string, score: number ] of Object.entries(propDiffs)) {\n    const normalizedScore: number = range > 0\n      ? (score - minScore) / range\n      : 0;\n\n    normalized[prop] = normalizedScore;\n  }\n\n  return normalized;\n}\n\nexport async function diffRuleMatches (instance: Object, options: Object, ruleMatches: RuleMatch[]): Promise<[ string, DiffResults ][]> {\n  // Base path for all screenshots\n  const screenshotDirPath: string = path.resolve(__dirname, '../../', options.screenshotDir);\n\n  /**\n   * Capture and write the base screenshot for comparison.\n   */\n  const basePNG: PNG = await screenshotPage(instance, options.writeScreenshots, path.resolve(screenshotDirPath, 'base.png'));\n\n  const differ = await createDiffer(basePNG);\n\n  // Collect diff scores\n  const cssRules: [ string, DiffResults ][] = [];\n\n  /**\n   * Iterate over each RuleMatch and toggle its styles\n   */\n  for (const rm: RuleMatch of ruleMatches) {\n    const rmRuleStyle: CSSStyle = rm.rule.style;\n\n    /**\n     * Want to extract just the matched selector from the RuleMatch\n     * selector string.\n     */\n    const matchingSelectorIndices: number = rm.matchingSelectors;\n    const selectors: Value[] = rm.rule.selectorList.selectors;\n    const selectorString: string = matchingSelectorIndices.map(i => selectors[i].text)\n      .join(', ');\n\n    console.log(JSON.stringify(selectorString, null, 2));\n\n    // Collect the diff for this rule\n    const rmDiff: DiffResults = {};\n\n    /**\n     * Iterate over props and toggle/screenshot each.\n     */\n    const props: CSSProperty[] = rmRuleStyle.cssProperties;\n\n    for (const prop of props) {\n      const propName = prop.name;\n\n      // Disable the property and save the reenabler function\n      const reenabler: () => Promise<CSSStyle> = await disableProperty(instance, rmRuleStyle, propName);\n\n      // Only continue if prop isn't browser-prefixed. If so, keep disabled and continue loop\n      const prefix: RegExp = /^-webkit-/;\n\n      if (!prefix.test(propName)) {\n        // Screenshot page\n        const comparisonPNG: PNG = await screenshotPage(\n          instance,\n          options.writeScreenshots,\n          path.resolve(screenshotDirPath, `${prop.name}.png`),\n        );\n\n        // Re-enable and compute diff simultaneously\n        const [ diff ] = await Promise.all([\n          differ(\n            comparisonPNG,\n            options.writeScreenshots,\n            path.resolve(screenshotDirPath, `${prop.name}-diff.png`)\n          ),\n          reenabler(),\n        ]);\n\n        console.log(prop.name, diff);\n\n        // Add the result for this prop to the rmDiff for this rule block\n        rmDiff[prop.name] = diff;\n      } else {\n        // If it's a browser-prefixed property, keep disabled and continue loop\n        console.log(`Disabled browser-prefixed property ${propName}`);\n      }\n    }\n\n    // Add the diff results for this rule to the structure-preserving cssRules list.\n    cssRules.push([ selectorString, rmDiff ]);\n  }\n\n  console.log(JSON.stringify(cssRules, null, 2));\n\n  return cssRules;\n}\n"]}