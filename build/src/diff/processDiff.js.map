{"version":3,"sources":["../../../src/diff/processDiff.js"],"names":["normalizeScores","propDiffs","props","Object","keys","allScores","map","k","maxScore","Math","max","apply","minScore","min","range","normalized","entries","prop","score","normalizedScore","instance","options","ruleMatches","screenshotDirPath","resolve","__dirname","screenshotDir","writeScreenshots","basePNG","differ","cssRules","rm","rmRuleStyle","rule","style","selectorString","selectorList","text","console","log","JSON","stringify","rmDiff","cssProperties","propName","name","reenabler","comparisonPNG","Promise","all","diff","selector","dr","diffRuleMatches"],"mappings":"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","file":"processDiff.js","sourcesContent":["import path from 'path';\nimport disableProperty from '../chrome/disableProperty';\nimport screenshotPage from '../chrome/screenshot';\nimport createDiffer from './pdiff';\n\n/**\n * Iterate over the diff results and return an ordering of normalized prop-diff pairs.\n * @param  {DiffResults} propDiffs   map from properties to pdiff scores\n * @return {DiffPair[]}              pairs ordered from largest to smallest score\n */\nfunction normalizeScores (propDiffs: DiffResults): DiffResults {\n  const props: string[] = Object.keys(propDiffs);\n\n  // First compute the max pdiff value\n  const allScores: number[] = props.map(k => propDiffs[k]);\n  const maxScore: number = Math.max.apply(null, allScores);\n  const minScore: number = Math.min.apply(null, allScores);\n  const range: number = maxScore - minScore;\n\n  // console.log(Object.entries(propDiffs).find(pair => pair[1] === maxScore));\n  // console.log(Object.entries(propDiffs).find(pair => pair[1] === minScore));\n\n  // Normalize everything\n  const normalized: DiffResults = {};\n\n  for (const [ prop: string, score: number ] of Object.entries(propDiffs)) {\n    const normalizedScore: number = range > 0\n      ? (score - minScore) / range\n      : 0;\n\n    normalized[prop] = normalizedScore;\n  }\n\n  return normalized;\n}\n\nexport default async function diffRuleMatches (instance: Object, options: Object, ruleMatches: RuleMatch[]): Promise<DiffResults> {\n  // Base path for all screenshots\n  const screenshotDirPath: string = path.resolve(__dirname, '../../', options.screenshotDir);\n\n  /**\n   * Capture and write the base screenshot for comparison.\n   */\n  const basePNG: PNG = await screenshotPage(instance, options.writeScreenshots, path.resolve(screenshotDirPath, 'base.png'));\n\n  const differ = await createDiffer(basePNG);\n\n  // Collect diff scores\n  const cssRules = {};\n\n  /**\n   * Iterate over each RuleMatch and toggle its styles\n   */\n  for (const rm: RuleMatch of ruleMatches) {\n    const rmRuleStyle: CSSStyle = rm.rule.style;\n    const selectorString: string = rm.rule.selectorList.text;\n\n    console.log(JSON.stringify(selectorString, null, 2));\n\n    // Collect the diff for this rule\n    const rmDiff: DiffResults = {};\n\n    /**\n     * Iterate over props and toggle/screenshot each.\n     */\n    const props: CSSProperty[] = rmRuleStyle.cssProperties;\n\n    for (const prop of props) {\n      const propName = prop.name;\n\n      // Disable the property and save the reenabler function\n      const reenabler: () => Promise<CSSStyle> = await disableProperty(instance, rmRuleStyle, propName);\n\n      // Screenshot page\n      const comparisonPNG: PNG = await screenshotPage(\n        instance,\n        options.writeScreenshots,\n        path.resolve(screenshotDirPath, `${prop.name}.png`),\n      );\n\n      // Re-enable and compute diff simultaneously\n      const [ diff ] = await Promise.all([\n        differ(\n          comparisonPNG,\n          options.writeScreenshots || prop.name === 'background-repeat-x' || prop.name === 'transition-duration',\n          path.resolve(screenshotDirPath, `${prop.name}-diff.png`)\n        ),\n        reenabler(),\n      ]);\n\n      console.log(prop.name, diff);\n\n      // Add the result for this prop to the rmDiff object for this rule block\n      rmDiff[prop.name] = diff;\n    }\n\n    // Add the diff results for this rule to the structure-preserving cssRules object.\n    cssRules[selectorString] = rmDiff;\n  }\n\n  console.log(JSON.stringify(cssRules, null, 2));\n\n  const normalized: DiffResults = {};\n\n  for (const [ selector, dr ] of Object.entries(cssRules)) {\n    normalized[selector] = normalizeScores(dr);\n  }\n\n  return normalized;\n}\n"]}