{"version":3,"sources":["../../../src/preparePage.js"],"names":["applyPseudoStates","forcePseudoState","instance","rootId","selector","pseudoStatesToForce","CSS","nodeId","forcedPseudoClasses","options","length","promisify","bind","Promise","all","map","ps","forcePseudoClasses","promises"],"mappings":";;;;;QA4BgBA,iB,GAAAA,iB;;AA3BhB;;;;AACA;;;;AAEA;;;;;;;;AAQA,SAASC,gBAAT,CAA2BC,QAA3B,EAA6CC,MAA7C,EAA6DC,QAA7D,EAA+EC,mBAA/E,EAA8H;AAC5H,SAAO,0CAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AACAC,eADA,GACQJ,QADR,CACAI,GADA;AAAA;AAAA,mBAGqB,yBAAUJ,QAAV,EAAoBC,MAApB,EAA4BC,QAA5B,CAHrB;;AAAA;AAGFG,kBAHE;AAAA,6CAKDD,IAAIL,gBAAJ,CAAqB;AAC1BM,4BAD0B;AAE1BC,mCAAqBH;AAFK,aAArB,CALC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH,EAAP;AAUD;;AAED;;;AAGO,SAASL,iBAAT,CAA4BE,QAA5B,EAA8CC,MAA9C,EAA8DM,OAA9D,EAAgG;AACrG,SAAO,0CAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AACAH,eADA,GACQJ,QADR,CACAI,GADA;AAEAD,+BAFA,GAEwBI,OAFxB,CAEAJ,mBAFA;;AAIR;;AAJQ,kBAKJ,CAACA,mBAAD,IAAwB,CAACA,oBAAoBK,MALzC;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAQR;AACA;AACA;AACA;;AAEA;AACMC,qBAdE,GAcUV,iBAAiBW,IAAjB,CAAsB,IAAtB,EAA4BV,QAA5B,EAAsCC,MAAtC,CAdV;AAAA;AAAA,mBAeeU,QAAQC,GAAR,CAAYT,oBAAoBU,GAApB,CAAwB;AAAA,qBAAMJ,UAAUK,GAAGZ,QAAb,EAAuBY,GAAGC,kBAA1B,CAAN;AAAA,aAAxB,CAAZ,CAff;;AAAA;AAeFC,oBAfE;AAAA,8CAiBDhB,QAjBC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH,EAAP;AAmBD","file":"preparePage.js","sourcesContent":["// @flow\nimport co from 'co';\nimport { getNodeId } from './elements';\n\n/**\n * Force a pseudo state on a particular element.\n * @param {Object} instance    a Chrome Remote Viewer instance\n * @param {number} rootId      nodeId of document root node\n * @param {String} selector    selector for the element to force\n * @param {PseudoClass[]} forcePseudoStates   array of pseudoclasses to force\n * @return {Promise<void>}\n */\nfunction forcePseudoState (instance: Object, rootId: number, selector: string, pseudoStatesToForce: PseudoClass[]): Promise<> {\n  return co(function* () {\n    const { CSS } = instance;\n\n    const nodeId: number = yield getNodeId(instance, rootId, selector);\n\n    return CSS.forcePseudoState({\n      nodeId,\n      forcedPseudoClasses: pseudoStatesToForce,\n    });\n  });\n}\n\n/**\n * Add pseudoclasses to elements on the page before screenshotting.\n */\nexport function applyPseudoStates (instance: Object, rootId: number, options: Object): Promise<Object> {\n  return co(function* () {\n    const { CSS } = instance;\n    const { pseudoStatesToForce } = options;\n\n    // If `options.pseudoStatesToForce` was undefined or an empty array, ignore\n    if (!pseudoStatesToForce || !pseudoStatesToForce.length) {\n      return;\n    }\n    // pseudoStates: [{\n    //   selector: 'body > div > div.content > div > p:nth-child(1) > span.tooltip.tooltip-effect-1',\n    //   forcePseudoClasses: ['hover'],\n    // }],\n\n    // Bind the helper promisifier to the current instance.\n    const promisify = forcePseudoState.bind(null, instance, rootId);\n    const promises = yield Promise.all(pseudoStatesToForce.map(ps => promisify(ps.selector, ps.forcePseudoClasses)));\n\n    return instance;\n  });\n}\n"]}