{"version":3,"sources":["../../../src/main.js"],"names":["main","diffRuleMatches","instance","options","ruleMatches","screenshotDirPath","resolve","__dirname","screenshotDir","basePNG","differ","diffScores","cssRules","rm","rmRuleStyle","rule","style","selectorString","selectorList","text","console","log","JSON","stringify","props","cssProperties","prop","propName","name","reenabler","writeScreenshots","comparisonPNG","Promise","all","diff","normalizeScores","propDiffs","Object","keys","allScores","map","k","maxScore","Math","max","apply","normalized","entries","score","normalizedScore","rootId","pseudoStates","diffResults","close"],"mappings":";;;;;;;;kBAmIwBA,I;;AAlIxB;;;;AACA;;;;AACA;;AAEA;;AACA;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,SAASC,eAAT,CACEC,QADF,EAEEC,OAFF,EAGEC,WAHF,EAIwB;AACtB,SAAO,0CAAG;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAER;AACMC,6BAHE,GAG0B,eAAKC,OAAL,CAAaC,SAAb,EAAwB,KAAxB,EAA+BJ,QAAQK,aAAvC,CAH1B;;AAKR;;;;AALQ;AAAA,mBAQmB,0BAAeN,QAAf,EAAyB,IAAzB,EAA+B,eAAKI,OAAL,CAAaD,iBAAb,EAAgC,UAAhC,CAA/B,CARnB;;AAAA;AAQFI,mBARE;AAAA;AAAA,mBAUa,qBAAaA,OAAb,CAVb;;AAAA;AAUFC,kBAVE;;;AAYR;AAEMC,sBAdE,GAcwB,EAdxB;;AAgBR;;AACMC,oBAjBE,GAiBS,EAjBT;;AAmBR;;;;AAnBQ;AAAA;AAAA;AAAA;AAAA,wBAsBoBR,WAtBpB;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAsBGS,cAtBH;AAuBAC,uBAvBA,GAuBwBD,GAAGE,IAAH,CAAQC,KAvBhC;AAwBAC,0BAxBA,GAwByBJ,GAAGE,IAAH,CAAQG,YAAR,CAAqBC,IAxB9C;;;AA0BNC,oBAAQC,GAAR,CAAYC,KAAKC,SAAL,CAAeN,cAAf,EAA+B,IAA/B,EAAqC,CAArC,CAAZ;;AAEA;;;AAGMO,iBA/BA,GA+BuBV,YAAYW,aA/BnC;AAAA;AAAA;AAAA;AAAA;AAAA,yBAiCWD,KAjCX;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiCGE,gBAjCH;AAkCEC,oBAlCF,GAkCaD,KAAKE,IAlClB;;AAoCJ;;AApCI;AAAA,mBAqC6C,+BAAgB1B,QAAhB,EAA0BY,WAA1B,EAAuCa,QAAvC,CArC7C;;AAAA;AAqCEE,qBArCF;AAAA;AAAA,mBAwC6B,0BAC/B3B,QAD+B,EAE/BC,QAAQ2B,gBAFuB,EAG/B,eAAKxB,OAAL,CAAaD,iBAAb,EAAmCqB,KAAKE,IAAxC,UAH+B,CAxC7B;;AAAA;AAwCEG,yBAxCF;AAAA;AAAA,mBA+CmBC,QAAQC,GAAR,CAAY,CACjCvB,OACEqB,aADF,EAEE5B,QAAQ2B,gBAFV,EAGE,eAAKxB,OAAL,CAAaD,iBAAb,EAAmCqB,KAAKE,IAAxC,eAHF,CADiC,EAMjCC,WANiC,CAAZ,CA/CnB;;AAAA;AAAA;AAAA;AA+CIK,gBA/CJ;;;AAwDJd,oBAAQC,GAAR,CAAYK,KAAKE,IAAjB,EAAuBM,IAAvB;;AAEAvB,uBAAWe,KAAKE,IAAhB,IAAwBM,IAAxB;;AA1DI;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA,6CA8DDvB,UA9DC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH,EAAP;AAgED;;AAED;;;;;AAKA,SAASwB,eAAT,CAA0BC,SAA1B,EAA+D;AAC7D,MAAMZ,QAAkBa,OAAOC,IAAP,CAAYF,SAAZ,CAAxB;;AAEA;AACA,MAAMG,YAAsBf,MAAMgB,GAAN,CAAU;AAAA,WAAKJ,UAAUK,CAAV,CAAL;AAAA,GAAV,CAA5B;AACA,MAAMC,WAAmBC,KAAKC,GAAL,CAASC,KAAT,CAAeN,SAAf,CAAzB;;AAEA;AACA,MAAMO,aAA0B,EAAhC;;AAR6D;AAAA;AAAA;;AAAA;AAU7D,0BAA4BT,OAAOU,OAAP,CAAeX,SAAf,CAA5B,mIAAuD;AAAA;AAAA,UAA3CV,IAA2C;AAAA,UAArCsB,KAAqC;;AACrD,UAAMC,kBAA0BD,QAAQN,QAAxC;AACAI,iBAAWpB,IAAX,IAAmBuB,eAAnB;AACD;AAb4D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAe7D,SAAOH,UAAP;AACD;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;AAGe,SAAS9C,IAAT,CAAeE,QAAf,EAAyBC,OAAzB,EAAkC;AAC/C,SAAO,0CAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AACR;AACA;AAFQ;AAAA,mBAGqB,iCAAkBD,QAAlB,CAHrB;;AAAA;AAGFgD,kBAHE;AAAA;AAAA,mBAMmB,oCAAkBhD,QAAlB,EAA4BgD,MAA5B,EAAoC/C,OAApC,CANnB;;AAAA;AAMFgD,wBANE;AAAA;AAAA,mBAS+B,gCAAiBjD,QAAjB,EAA2BgD,MAA3B,EAAmC/C,OAAnC,CAT/B;;AAAA;AASFC,uBATE;AAAA;AAAA,mBAY+BH,gBAAgBC,QAAhB,EAA0BC,OAA1B,EAAmCC,WAAnC,CAZ/B;;AAAA;AAYFgD,uBAZE;;;AAcRhC,oBAAQC,GAAR,CAAYC,KAAKC,SAAL,CAAe6B,WAAf,EAA4B,IAA5B,EAAkC,CAAlC,CAAZ;AACAlD,qBAASmD,KAAT;;AAfQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH,EAAP;AAiBD","file":"main.js","sourcesContent":["// @flow\nimport path from 'path';\nimport co from 'co';\nimport { PNG } from 'pngjs';\n\nimport { applyPseudoStates } from './preparePage';\nimport { getElementStyles, getDocumentRootId } from './elements';\nimport disableProperty from './disableProperty';\nimport screenshotPage from './screenshot';\nimport createDiffer from './pdiff';\n\nfunction diffRuleMatches (\n  instance: Object,\n  options: Object,\n  ruleMatches: RuleMatch[]\n): Promise<DiffResults> {\n  return co(function* () {\n\n    // Base path for all screenshots\n    const screenshotDirPath: string = path.resolve(__dirname, '../', options.screenshotDir);\n\n    /**\n     * Capture and write the base screenshot for comparison.\n     */\n    const basePNG: PNG = yield screenshotPage(instance, true, path.resolve(screenshotDirPath, 'base.png'));\n\n    const differ = yield createDiffer(basePNG);\n\n    // Collect diff scores\n    // TODO: replace with a heap (or some other way to keep track of the sorting)\n    const diffScores: DiffResults = {};\n\n    // Also collect the rule structure\n    const cssRules = {};\n\n    /**\n     * Iterate over each RuleMatch and toggle its styles\n     */\n    for (const rm: RuleMatch of ruleMatches) {\n      const rmRuleStyle: CSSStyle = rm.rule.style;\n      const selectorString: string = rm.rule.selectorList.text;\n\n      console.log(JSON.stringify(selectorString, null, 4));\n\n      /**\n       * Iterate over props and toggle/screenshot each.\n       */\n      const props: CSSProperty[] = rmRuleStyle.cssProperties;\n\n      for (let prop of props) {\n        const propName = prop.name;\n\n        // Disable the property and save the reenabler function\n        const reenabler: () => Promise<CSSStyle> = yield disableProperty(instance, rmRuleStyle, propName);\n\n        // Screenshot page\n        const comparisonPNG: PNG = yield screenshotPage(\n          instance,\n          options.writeScreenshots,\n          path.resolve(screenshotDirPath, `${prop.name}.png`),\n        );\n\n        // Re-enable and compute diff simultaneously\n        const [ diff ] = yield Promise.all([\n          differ(\n            comparisonPNG,\n            options.writeScreenshots,\n            path.resolve(screenshotDirPath, `${prop.name}-diff.png`)\n          ),\n          reenabler(),\n        ]);\n\n        console.log(prop.name, diff);\n\n        diffScores[prop.name] = diff;\n      }\n    }\n\n    return diffScores;\n  });\n}\n\n/**\n * Iterate over the diff results and return an ordering of normalized prop-diff pairs.\n * @param  {DiffResults} propDiffs   map from properties to pdiff scores\n * @return {DiffPair[]}              pairs ordered from largest to smallest score\n */\nfunction normalizeScores (propDiffs: DiffResults): DiffResults {\n  const props: string[] = Object.keys(propDiffs);\n\n  // First compute the max pdiff value\n  const allScores: number[] = props.map(k => propDiffs[k]);\n  const maxScore: number = Math.max.apply(allScores);\n\n  // Normalize everything\n  const normalized: DiffResults = {};\n\n  for (const [prop, score] of Object.entries(propDiffs)) {\n    const normalizedScore: number = score / maxScore;\n    normalized[prop] = normalizedScore;\n  }\n\n  return normalized;\n}\n\n// color                         127999\n// height                       1262598\n// left                           81288\n// overflow                      137474\n// position                      124006\n// top                           130289\n// text-align                    127999\n// width                        1200443\n// -webkit-transform             137537\n// transform                     141342\n// transition                    119614\n// transition                    140787\n// overflow-x                    113539\n// overflow-y                    109058\n// transition-duration           133669\n// transition-timing-function    139477\n// transition-delay               81288\n// transition-property           128418\n// color                         133420\n// padding-top                   133897\n// z-index                       139879\n\n\n/**\n * Function to execute once the page loads in Canary.\n */\nexport default function main (instance, options) {\n  return co(function* () {\n    debugger;\n    // Get root node\n    const rootId: number = yield getDocumentRootId(instance);\n\n    // Apply pseudo-states\n    const pseudoStates = yield applyPseudoStates(instance, rootId, options);\n\n    // Get element styles\n    const ruleMatches: RuleMatch[] = yield getElementStyles(instance, rootId, options);\n\n    // Diff everything\n    const diffResults: DiffResults = yield diffRuleMatches(instance, options, ruleMatches);\n\n    console.log(JSON.stringify(diffResults, null, 2));\n    instance.close();\n  });\n}\n"]}